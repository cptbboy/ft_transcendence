import { Socket } from 'socket.io';
import { Users } from '../user/user.service';
export declare class ChatService {
    readonly users: Users;
    constructor(users: Users);
    private channels;
    private members;
    private invites;
    addChannel(channel_id: string, client: Socket, open: boolean, password: string): Channel;
    addUser(intra: string, client: Socket): Promise<void>;
    joinChannel(client: Socket, channel_id: string): void;
    getUserFromSocket(client: Socket): User;
    getIntraFromSocket(client: Socket): string;
    findUserFromUsername(username: string): User;
    getUserFromIntra(intra: string): User;
    getChannelFromId(channel_id_to_find: string): Channel;
    reapeEmptyChannels(): void;
    message(client: Socket, message_body: string): [string, string, string];
    unknown(client: Socket, command: string): [string, string, string];
    help(client: Socket, command: string): [string, string, string];
    create(client: Socket, channel_id: string, passwd: string): [string, string, string];
    join(client: Socket, channel_id: string, passwd: string): [string, string, string];
    dm(client: Socket, username: string, message_begin: string, prompt: string): [string, string, string];
    leave(client: Socket): [string, string, string];
    operator(client: Socket, username: string): [string, string, string];
    demote(client: Socket, username: string): [string, string, string];
    kick(client: Socket, username: string): [string, string, string];
    ban(client: Socket, username: string): [string, string, string];
    mute(client: Socket, username: string, duration: number): [string, string, string];
    visit(client: Socket, username: string): Promise<[string, string, string]>;
    invite(client: Socket, username: string): [string, string, string];
    set(client: Socket, option: string, value: string): [string, string, string];
    unset(client: Socket, password: string): [string, string, string];
    block(client: Socket, username: string): Promise<[string, string, string]>;
    unblock(client: Socket, username: string): Promise<[string, string, string]>;
    ping(client: Socket, username: string, mode?: string): [string, string, string];
    pong(client: Socket, username: string): [string, string, string];
}
export declare class User {
    private readonly intraname;
    private readonly users;
    private socket;
    private active_channel;
    constructor(intraname: string, users: Users, socket: Socket, active_channel: string);
    private username;
    private ingame;
    private pending_message;
    private blocked_users;
    updateUserData(): Promise<void>;
    getSocket(): Socket;
    getActiveChannelId(): string;
    getUsername(): string;
    getIntra(): string;
    getPendingMessage(): string;
    getBlocks(): string[];
    getIngameStatus(): boolean;
    setActiveChannel(channel: string): void;
    setPendingMessage(message: string): void;
    setIngameStatus(status: boolean): void;
    addBlockedUser(intra: string): void;
    removeBlockedUser(intra: string): void;
    isAlreadyBlocked(intra: string): boolean;
}
export declare class Channel {
    private readonly channel_id;
    private owner;
    private open;
    private password;
    constructor(channel_id: string, owner: User, open: boolean, password: string);
    private members;
    private admins;
    private chat_history;
    private muted;
    private banned;
    private invited;
    isGhostChannel(): boolean;
    getOtherDmUsername(intra: string): string;
    addMessageToHistory(sender: string, message_body: string): void;
    getChatHistory(): [string, string][];
    getPassword(): string;
    setPassword(passwd: string): void;
    isOwner(user: User): boolean;
    isAdmin(user: User): boolean;
    isPrivate(): boolean;
    isProtected(): boolean;
    isBanned(user: User): boolean;
    isMuted(user: User): boolean;
    isInvited(user: User): boolean;
    getChannelId(): string;
    rightPassword(passwd: string): boolean;
    addMember(user: User): void;
    addAdmin(user: User): void;
    addMuted(user: User, epoch_seconds: number): void;
    getMutedDuration(user: User): number;
    addBanned(user: User): void;
    addInvited(user: User): void;
    removeMember(user: User): void;
    removeAdmin(user: User): void;
    setOpen(open: boolean): void;
    changeOwner(): void;
}
